Да дело в том, что я не тупой и ленивый, лень монки-кодить, кода есть возможность этого избежать. Да, надо бы написать, вы уже не первый предлагаете. Хотя постов на эту тему предостаточно, и вряд ли я что-то новое добавлю. Посмотрите F# for Fun and Profit eBook, The "Why use F#?" series например. Особенно выпукло про C# там в "Worked example: Designing for correctness"

С выходом C# 7 почти ничего не поменялось, изменения в большей степени относятся к вкусовщине, чем к концептуальным вещам. 

Ну да, количество экранов ещё зависит от стиля форматирования (у меня примерно соответствует правилам Elm, строки в основном короткие) и зума (зрение норм, очки не ношу, зум соответственно не слоновий). 

Что именно из возможностей F# даёт наибольшее уменьшение кода на типичных проектах для .net. Чисто на вскидку:
- для получения и анализа внешних данных (веб-клиент, файловая система, внешнее железо, парсинг и т.п.) - обработка ошибок в вычислительных выражениях, особенно в асинхронщине. В C# это либо перехват иключений, либо постонные "if (err != null)" как Go.  
- провайдеры типов. Не надо самому писать классы предметной области и их унылую сериализацию. 
- иммутабельность и нуль-чекинг - тупо меньше тестов пишем и более надёжный код. 
- активные шаблоны (аналог ViewPatterns в GHC ). Без них паттернматчинг в С# 7 почти бесполезен, поскульку нельзя матчить бизнесс-данные 
- MaiboxProcessor из коробки и в качестве базового решения для конкурентности Hopac
